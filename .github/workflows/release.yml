name: Release Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-release:
    name: Build & Release Sentinel
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    steps:
      # -------------------------------
      # Checkout source code
      # -------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Force branch to workflow SHA
        run: git reset --hard ${{ github.sha }}

      # -------------------------------
      # Semantic Release (version bump, changelog, tagging)
      # -------------------------------
      - name: Semantic Release
        id: semantic-release
        uses: python-semantic-release/python-semantic-release@v10.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
          verbosity: 2

      # -------------------------------
      # Build Nuitka binary inside manylinux
      # -------------------------------
      - name: Build binary with Nuitka (manylinux_2_28, Python 3.12)
        if: steps.semantic-release.outputs.released == 'true'
        uses: addnab/docker-run-action@v3
        with:
          image: quay.io/pypa/manylinux_2_28_x86_64
          options: -v ${{ github.workspace }}:/workspace
          run: |
            # Unpack static libpython (required for Nuitka embedding)
            cd /opt/_internal
            tar xf static-libs-for-embedding-only.tar.xz

            # Setup Python 3.12 virtualenv
            cd /workspace
            /opt/python/cp312-cp312/bin/python -m venv venv
            source venv/bin/activate

            # Install build tools + app dependencies
            pip install --upgrade pip setuptools wheel nuitka
            pip install -r requirements.txt

            VERSION=${{ steps.semantic-release.outputs.version }}
            BASENAME="sentinel-linux-x86_64-${VERSION}"
            echo ">>> Building Sentinel version $VERSION -> $BASENAME"

            python -m nuitka \
              --onefile \
              --standalone \
              --lto=yes \
              --static-libpython=yes \
              --output-filename=$BASENAME \
              sentinel.py

            chmod +x $BASENAME
            mkdir -p dist
            mv $BASENAME dist/
            ls -lh dist/

      # -------------------------------
      # Smoke test binary
      # -------------------------------
      - name: Smoke test built binary
        if: steps.semantic-release.outputs.released == 'true'
        run: |
          echo ">>> Running smoke test..."
          ./dist/sentinel-linux-x86_64-* --help || (echo "❌ Binary failed to run" && exit 1)

      # -------------------------------
      # Publish binary to GitHub Release
      # -------------------------------
      - name: Publish binary to GitHub Release
        if: steps.semantic-release.outputs.released == 'true'
        uses: python-semantic-release/publish-action@v10.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.semantic-release.outputs.tag }}

      # -------------------------------
      # Build and Upload RPM to COPR
      # -------------------------------
      - name: Build source RPM (Nuitka binary)
        if: steps.semantic-release.outputs.released == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm copr-cli
          mkdir -p ~/rpmbuild/{SOURCES,SPECS,SRPMS}
          VERSION=${{ steps.semantic-release.outputs.version }}

          # Create source tarball with binary
          tar czf ~/rpmbuild/SOURCES/sentinel-${VERSION}-linux-x86_64.tar.gz -C dist sentinel-linux-x86_64-${VERSION}

          # Generate spec file from template
          sed "s/@VERSION@/${VERSION}/g" packaging/sentinel.spec.in > ~/rpmbuild/SPECS/sentinel.spec

          # Build source RPM
          rpmbuild -bs ~/rpmbuild/SPECS/sentinel.spec \
            --define "_sourcedir ~/rpmbuild/SOURCES" \
            --define "_srcrpmdir ~/rpmbuild/SRPMS"

      - name: Upload to COPR
        if: steps.semantic-release.outputs.released == 'true'
        env:
          COPR_CONFIG: ${{ secrets.COPR_CONFIG }}
        run: |
          mkdir -p ~/.config
          echo "$COPR_CONFIG" > ~/.config/copr
          copr-cli build epacking4721/sentinel ~/rpmbuild/SRPMS/*.src.rpm
          