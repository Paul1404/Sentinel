name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write   # needed to create releases
  id-token: write   # for future signing if needed

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # required for semantic-release to see all commits

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install python-semantic-release nuitka

      - name: Run semantic-release
        id: semrel
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release to bump version, tag, and create release
          semantic-release publish || echo "No previous tag found, creating v0.1.0"
          # If no tag exists yet, semantic-release exits non-zero
          # We handle that by creating an initial tag manually
          if ! git describe --tags --abbrev=0 >/dev/null 2>&1; then
            VERSION="0.1.0"
            git tag "v$VERSION"
            git push origin "v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            VERSION=$(git describe --tags --abbrev=0)
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          fi

      - name: Build binary with Nuitka
        run: |
          VERSION=${{ steps.semrel.outputs.version }}
          echo "Building Sentinel version $VERSION"
          nuitka3 --onefile --standalone sentinel.py \
            --output-filename=sentinel-linux-x86_64

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.semrel.outputs.version }}
          files: sentinel-linux-x86_64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}